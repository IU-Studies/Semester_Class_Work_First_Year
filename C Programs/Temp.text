#Group By
SELECT column1, AGGREGATE_FUNCTION(column2)
FROM table_name
GROUP BY column1;


#Order By
SELECT column1, column2, ...
FROM table_name
ORDER BY column1 [ASC|DESC], column2 [ASC|DESC], ...;


#Views
CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;


#Having
SELECT column1, AGGREGATE_FUNCTION(column2)
FROM table_name
GROUP BY column1
HAVING condition;


#Case
SELECT column1,
       CASE 
           WHEN condition1 THEN result1
           WHEN condition2 THEN result2
           ...
           ELSE resultN
       END AS new_column_name
FROM table_name;


#Nested Queries
/*Single-Row Subquery in WHERE Clause*/
SELECT column1, column2
FROM table_name
WHERE column1 = (SELECT column FROM other_table WHERE condition);

/*Multiple-Row Subquery with IN*/
SELECT column1, column2
FROM table_name
WHERE column1 IN (SELECT column FROM other_table WHERE condition);

/*Correlated Subquery*/
SELECT column1, column2
FROM table_name AS t1
WHERE column1 = (SELECT aggregate_function(column) FROM other_table AS t2 WHERE t1.column2 = t2.column3);


#Update
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;


#Delete
DELETE FROM table_name
WHERE condition;

#Left Join
SELECT columns
FROM table1
LEFT JOIN table2
ON table1.common_column = table2.common_column;


#Right Join
SELECT columns
FROM table1
RIGHT JOIN table2
ON table1.common_column = table2.common_column;


#Inner Join
SELECT columns
FROM table1
INNER JOIN table2
ON table1.common_column = table2.common_column;


#Outer Join
/* Left Outer Join */
SELECT columns
FROM table1
LEFT OUTER JOIN table2
ON table1.common_column = table2.common_column;

/* Right Outer Join */
SELECT columns
FROM table1
RIGHT OUTER JOIN table2
ON table1.common_column = table2.common_column;

/* Full Outer Join */
SELECT columns
FROM table1
FULL OUTER JOIN table2
ON table1.common_column = table2.common_column;


#Natural Join
SELECT columns
FROM table1
NATURAL JOIN table2;


#Self Join
SELECT a.column1, a.column2, b.column1, b.column2
FROM table_name a
JOIN table_name b
ON a.common_column = b.common_column;


#Cross Join
SELECT columns
FROM table1
CROSS JOIN table2;


#Square a number
DELIMITER $$

CREATE PROCEDURE square_number(IN num INT, OUT result INT)
BEGIN
    SET result = num * num;
END $$

DELIMITER ;

CALL square_number(5, @result);
SELECT @result;


#Procedure
/* Define Procedure */
CREATE PROCEDURE procedure_name (parameters)
BEGIN
    -- SQL statements
END;

/* Call */
CALL procedure_name(@result);
SELECT @result;  


#Trigger
CREATE TRIGGER trigger_name
{BEFORE | AFTER | INSTEAD OF} 
{INSERT | UPDATE | DELETE}
ON table_name
FOR EACH ROW
BEGIN
    -- Trigger logic (SQL statements)
END;











# Cursor
-- Declare a cursor
DECLARE cursor_name CURSOR FOR
SELECT columns
FROM table_name
WHERE condition;

-- Declare variables for the cursor
DECLARE variable_name1 datatype;
DECLARE variable_name2 datatype;
-- Add more variables as needed

-- Open the cursor
OPEN cursor_name;

-- Fetch the first row from the cursor
FETCH NEXT FROM cursor_name INTO variable_name1, variable_name2;

-- Loop through the cursor
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Perform operations with the fetched row
    -- Example: PRINT variable_name1, variable_name2;

    -- Fetch the next row from the cursor
    FETCH NEXT FROM cursor_name INTO variable_name1, variable_name2;
END;

-- Close the cursor
CLOSE cursor_name;

-- Deallocate the cursor
DEALLOCATE cursor_name;

#Function
CREATE FUNCTION function_name (parameters)
RETURNS return_datatype
AS
BEGIN
    -- Function logic (SQL statements)
    RETURN value;
END;
